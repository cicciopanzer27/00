#!/usr/bin/env node

/**
 * Script di seed per popolare il database con dati di esempio
 */

const SQLiteManager = require('./SQLiteManager');
const Hemisphere = require('../core/Hemisphere');
const { v4: uuidv4 } = require('uuid');
require('dotenv').config();

class DatabaseSeeder {
  constructor() {
    this.dbManager = new SQLiteManager({
      dbPath: process.env.DB_PATH || './data/agi.db',
      backupPath: process.env.DB_BACKUP_PATH || './data/backups'
    });
  }

  async seed() {
    console.log('üå± Avvio seeding database...');
    
    try {
      await this.dbManager.initialize();
      
      // Seed emisferi base
      await this.seedBaseHemispheres();
      
      // Seed query di esempio
      await this.seedSampleQueries();
      
      // Seed metriche performance
      await this.seedPerformanceMetrics();
      
      // Seed knowledge gaps
      await this.seedKnowledgeGaps();
      
      // Seed eventi di sistema
      await this.seedSystemEvents();
      
      console.log('‚úÖ Seeding completato con successo');
      
    } catch (error) {
      console.error('‚ùå Errore durante il seeding:', error);
      process.exit(1);
    } finally {
      await this.dbManager.close();
    }
  }

  async seedBaseHemispheres() {
    console.log('üß† Seeding emisferi base...');
    
    const baseDomains = [
      {
        domain: 'mathematics',
        config: { specialization: 'exact_science', confidence: 0.9 }
      },
      {
        domain: 'logic',
        config: { specialization: 'reasoning', confidence: 0.85 }
      },
      {
        domain: 'code',
        config: { specialization: 'programming', confidence: 0.8 }
      },
      {
        domain: 'language',
        config: { specialization: 'linguistics', confidence: 0.75 }
      },
      {
        domain: 'physics',
        config: { specialization: 'science', confidence: 0.7, autoGenerated: true }
      },
      {
        domain: 'biology',
        config: { specialization: 'science', confidence: 0.65, autoGenerated: true }
      }
    ];

    for (const domainData of baseDomains) {
      const hemisphere = new Hemisphere(domainData.domain, domainData.config);
      
      // Simula utilizzo
      hemisphere.usageCount = Math.floor(Math.random() * 100) + 10;
      hemisphere.lastUsed = new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000);
      
      await this.dbManager.saveHemisphere(hemisphere.serialize());
      console.log(`‚úÖ Emisfero ${domainData.domain} creato`);
    }
  }

  async seedSampleQueries() {
    console.log('üí¨ Seeding query di esempio...');
    
    const sampleQueries = [
      {
        query: "What is 2 + 2?",
        success: true,
        confidence: 0.95,
        mode: 'direct',
        primaryHemisphere: 'mathematics',
        processingTime: 150
      },
      {
        query: "Write a function to calculate fibonacci",
        success: true,
        confidence: 0.88,
        mode: 'direct',
        primaryHemisphere: 'code',
        processingTime: 320
      },
      {
        query: "Explain quantum physics",
        success: true,
        confidence: 0.72,
        mode: 'auto_generate',
        primaryHemisphere: 'physics',
        processingTime: 1200
      },
      {
        query: "How does photosynthesis work?",
        success: true,
        confidence: 0.68,
        mode: 'collaborative',
        primaryHemisphere: 'biology',
        collaboratingHemispheres: ['biology', 'physics'],
        processingTime: 890
      },
      {
        query: "What is the meaning of life?",
        success: false,
        confidence: 0.25,
        mode: 'meta_ignorance',
        processingTime: 450
      },
      {
        query: "Solve this differential equation: dy/dx = x^2",
        success: true,
        confidence: 0.91,
        mode: 'direct',
        primaryHemisphere: 'mathematics',
        processingTime: 280
      },
      {
        query: "Translate 'hello world' to Italian",
        success: true,
        confidence: 0.82,
        mode: 'direct',
        primaryHemisphere: 'language',
        processingTime: 180
      },
      {
        query: "Explain machine learning algorithms",
        success: true,
        confidence: 0.65,
        mode: 'collaborative',
        primaryHemisphere: 'code',
        collaboratingHemispheres: ['code', 'mathematics'],
        processingTime: 750
      }
    ];

    for (const queryData of sampleQueries) {
      const queryId = uuidv4();
      const queryHash = require('crypto').createHash('md5')
        .update(queryData.query.toLowerCase().trim()).digest('hex');
      
      const timestamp = new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000);
      
      const response = queryData.success ? {
        type: 'successful_response',
        content: `Risposta simulata per: ${queryData.query}`,
        confidence: queryData.confidence
      } : {
        type: 'meta_ignorance',
        content: `Non ho conoscenze sufficienti per: ${queryData.query}`,
        confidence: queryData.confidence
      };

      await this.dbManager.saveQuery({
        id: queryId,
        query: queryData.query,
        hash: queryHash,
        timestamp: timestamp.toISOString(),
        processingTime: queryData.processingTime,
        success: queryData.success,
        confidence: queryData.confidence,
        mode: queryData.mode,
        primaryHemisphere: queryData.primaryHemisphere,
        collaboratingHemispheres: queryData.collaboratingHemispheres || [],
        response: response,
        metadata: {
          seeded: true,
          sampleData: true,
          origin: 'AI',
          methodology: 'analisi computazionale',
          limitations: ['Dati simulati', 'Non validato sperimentalmente'],
          validation_status: 'peer_reviewed',
          contribution_type: 'sintesi',
          timestamp: timestamp.toISOString(),
          version: '2.0',
          reviewers: ['AI-Reviewer-1']
        }
      });
    }
    
    console.log(`‚úÖ ${sampleQueries.length} query di esempio create`);
  }

  async seedPerformanceMetrics() {
    console.log('üìä Seeding metriche performance...');
    
    const operations = [
      'query_processing',
      'hemisphere_analysis',
      'auto_generation',
      'database_save',
      'cache_lookup'
    ];

    for (let i = 0; i < 50; i++) {
      const operation = operations[Math.floor(Math.random() * operations.length)];
      const duration = Math.floor(Math.random() * 2000) + 50;
      const success = Math.random() > 0.1; // 90% successo
      const timestamp = new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000);

      await this.dbManager.savePerformanceMetric({
        timestamp: timestamp.toISOString(),
        operation,
        duration,
        success,
        metadata: {
          seeded: true,
          sampleData: true,
          randomValue: Math.random()
        }
      });
    }
    
    console.log('‚úÖ 50 metriche performance create');
  }

  async seedKnowledgeGaps() {
    console.log('üï≥Ô∏è Seeding knowledge gaps...');
    
    const knowledgeGaps = [
      {
        query: "Explain quantum entanglement in detail",
        type: 'domain_knowledge',
        severity: 0.8,
        tokens: ['quantum', 'entanglement', 'detail'],
        suggestions: ['Create physics specialization', 'Study quantum mechanics']
      },
      {
        query: "What is the latest research in neuroscience?",
        type: 'temporal_knowledge',
        severity: 0.7,
        tokens: ['latest', 'research', 'neuroscience'],
        suggestions: ['Update knowledge base', 'Connect to research APIs']
      },
      {
        query: "How do I fix this specific bug in my code?",
        type: 'contextual_knowledge',
        severity: 0.6,
        tokens: ['fix', 'specific', 'bug', 'code'],
        suggestions: ['Request code context', 'Improve debugging capabilities']
      },
      {
        query: "What is the weather like today?",
        type: 'real_time_data',
        severity: 0.9,
        tokens: ['weather', 'today'],
        suggestions: ['Connect to weather API', 'Add real-time data capabilities']
      }
    ];

    for (const gapData of knowledgeGaps) {
      const queryHash = require('crypto').createHash('md5')
        .update(gapData.query.toLowerCase().trim()).digest('hex');
      
      const timestamp = new Date(Date.now() - Math.random() * 14 * 24 * 60 * 60 * 1000);

      await this.dbManager.saveKnowledgeGap({
        query: gapData.query,
        hash: queryHash,
        type: gapData.type,
        severity: gapData.severity,
        tokens: gapData.tokens,
        hemisphereConfidences: [
          { domain: 'mathematics', confidence: 0.1 },
          { domain: 'logic', confidence: 0.2 },
          { domain: 'code', confidence: 0.15 },
          { domain: 'language', confidence: 0.3 }
        ],
        suggestions: gapData.suggestions
      });
    }
    
    console.log(`‚úÖ ${knowledgeGaps.length} knowledge gaps creati`);
  }

  async seedSystemEvents() {
    console.log('üìù Seeding eventi di sistema...');
    
    const systemEvents = [
      {
        type: 'system_startup',
        severity: 'info',
        message: 'Sistema AGI avviato con successo',
        data: { hemispheres: 4, version: '1.0.0' },
        source: 'orchestrator'
      },
      {
        type: 'hemisphere_created',
        severity: 'info',
        message: 'Nuovo emisfero auto-generato: physics',
        data: { domain: 'physics', confidence: 0.7, autoGenerated: true },
        source: 'hemisphere_factory'
      },
      {
        type: 'performance_warning',
        severity: 'warning',
        message: 'Tempo di risposta elevato rilevato',
        data: { averageTime: 1500, threshold: 1000 },
        source: 'resource_manager'
      },
      {
        type: 'cache_cleared',
        severity: 'info',
        message: 'Cache query pulita automaticamente',
        data: { removedItems: 25, totalSize: 1000 },
        source: 'resource_manager'
      },
      {
        type: 'database_backup',
        severity: 'info',
        message: 'Backup database creato',
        data: { backupPath: './data/backups/agi-backup-2024.db' },
        source: 'database_manager'
      }
    ];

    for (const eventData of systemEvents) {
      const timestamp = new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000);
      
      await this.dbManager.saveSystemEvent({
        ...eventData,
        timestamp: timestamp.toISOString()
      });
    }
    
    console.log(`‚úÖ ${systemEvents.length} eventi di sistema creati`);
  }

  async clear() {
    console.log('üßπ Pulizia database...');
    
    try {
      await this.dbManager.initialize();
      
      const tables = [
        'hemisphere_generations',
        'system_events',
        'ignorance_patterns',
        'knowledge_gaps',
        'performance_metrics',
        'queries',
        'hemispheres'
      ];

      for (const table of tables) {
        await this.dbManager.run(`DELETE FROM ${table}`);
        console.log(`‚úÖ Tabella ${table} pulita`);
      }
      
      // Reset auto-increment
      await this.dbManager.run('DELETE FROM sqlite_sequence');
      
      console.log('‚úÖ Database pulito completamente');
      
    } catch (error) {
      console.error('‚ùå Errore durante la pulizia:', error);
      process.exit(1);
    } finally {
      await this.dbManager.close();
    }
  }

  async status() {
    console.log('üìä Stato database...');
    
    try {
      await this.dbManager.initialize();
      
      const stats = await this.dbManager.getDatabaseStats();
      
      console.log('\nüìà Statistiche database:');
      console.log('========================');
      
      for (const [table, count] of Object.entries(stats)) {
        if (table !== 'databaseSize') {
          console.log(`${table.padEnd(20)}: ${count.toString().padStart(6)} record`);
        }
      }
      
      console.log(`${'dimensione'.padEnd(20)}: ${(stats.databaseSize / 1024 / 1024).toFixed(2).padStart(6)} MB`);
      
    } catch (error) {
      console.error('‚ùå Errore lettura stato:', error);
      process.exit(1);
    } finally {
      await this.dbManager.close();
    }
  }
}

// Esegui seeding se chiamato direttamente
if (require.main === module) {
  const seeder = new DatabaseSeeder();
  
  const command = process.argv[2];
  
  switch (command) {
    case 'seed':
      seeder.seed();
      break;
    case 'clear':
      seeder.clear();
      break;
    case 'status':
      seeder.status();
      break;
    default:
      console.log('Uso: node seed.js [seed|clear|status]');
      console.log('');
      console.log('Comandi:');
      console.log('  seed   - Popola il database con dati di esempio');
      console.log('  clear  - Pulisce tutti i dati dal database');
      console.log('  status - Mostra statistiche del database');
      process.exit(1);
  }
}

module.exports = DatabaseSeeder;

